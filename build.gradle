plugins {
  id 'groovy'
  id 'java-gradle-plugin'
  id 'signing'
  id 'maven-publish'
  id("com.gradle.plugin-publish") version "1.3.1"
  id "com.github.ben-manes.versions" version "0.51.0"
}

group = 'se.alipsa'
version = '1.0.1'
description = 'Automates the release process in Nexus (e.g. Sonatype OSSRH) after upload (publish) has completed'

gradlePlugin {
  website.set("https://github.com/Alipsa/nexus-release-plugin")
  vcsUrl.set("https://github.com/Alipsa/nexus-release-plugin")
  plugins {
    simplePlugin {
      id = "${project.group}.${project.name}"
      implementationClass = 'se.alipsa.groovy.NexusReleasePlugin'
      displayName = "Gradle Nexus Release Plugin"
      description = project.description
      tags.set(["nexus", "publish", "release", "ossrh", "sonatype"])
    }
  }
}

repositories {
  if (version.contains('SNAPSHOT')) {
    mavenLocal()
  }
  mavenCentral()
}

dependencies {
  def groovyVersion = "4.0.26"
  compileOnly "org.apache.groovy:groovy:${groovyVersion}"

  testImplementation 'org.junit.jupiter:junit-jupiter:5.12.0'
  testImplementation "org.apache.groovy:groovy:${groovyVersion}"
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
  withJavadocJar()
  withSourcesJar()
}


publishing {
  publications {
    pluginMaven(MavenPublication) {
      pom {
        name = 'Nexus Release Plugin'
        description = "${project.description}"
        url = "https://github.com/perNyfelt/nexus-release-plugin"
        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/perNyfelt/nexus-release-plugin/master/LICENSE'
          }
        }
        developers {
          developer {
            id = 'perNyfelt'
            name = 'Per Nyfelt'
          }
        }
        scm {
          url = 'https://github.com/perNyfelt/nexus-release-plugin/tree/master'
          connection = 'scm:git:https://github.com/perNyfelt/nexus-release-plugin.git'
          developerConnection = 'scm:git:https://github.com/perNyfelt/nexus-release-plugin.git'
        }
      }
    }
  }
}

if (project.properties['signing.keyId'] == null) {
  tasks.project.signPluginMavenPublication {
    enabled = false
  }
  tasks.project.signSimplePluginPluginMarkerMavenPublication {
    enabled = false
  }
}

/*
tasks.register('signPluginMavenPublication') {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    signPluginMavenPublication publishing.publications.pluginMaven
  } else {
    project.logger.lifecycle("signing.keyId is not defined, skipping signPluginMavenPublication...")
  }
}

tasks.register('signSimplePluginPluginMarkerMavenPublication') {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    signSimplePluginPluginMarkerMavenPublication publishing.publications.pluginMaven
  } else {
    project.logger.lifecycle("signing.keyId is not defined, signSimplePluginPluginMarkerMavenPublication...")
  }
}*/

signing {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    sign publishing.publications.pluginMaven
  } else {
    project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
  }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}
// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
  gradleReleaseChannel = "current"
  resolutionStrategy {
    componentSelection {
      all {
        if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
          reject('Release candidate')
        }
      }
    }
  }
}
